% 该函数的作用是将网格数据写入到ply格式的文件中。
% 
% 输入参数：
% - filename: 字符串，要写入的文件名。
% - face: 双精度数组，nf x 3的数组，指定网格的连接性。
% - vertex: 双精度数组，nv x 3的数组，指定顶点的位置。
% - color: 双精度数组，nv x 3或nf x 3的数组，指定顶点或面的颜色。
% 
% 输出参数：无。
% 
% 函数的实现过程：
% 1. 打开文件，如果无法打开则报错。
% 2. 计算顶点数、面数、每个面的顶点数和颜色数。
% 3. 写入文件头部信息，包括ply格式、版本、注释、顶点数、顶点属性、面数、面属性等。
% 4. 如果有颜色信息，则写入颜色属性。
% 5. 将顶点和颜色信息合并。
% 6. 将面信息中的顶点索引加1，将面和颜色信息合并。
% 7. 将顶点和面信息写入文件。
% 8. 关闭文件。
% 
% 该函数的使用方法：
% - 写入不带颜色的网格数据：write_ply('cube.ply',face,vertex);
% - 写入带颜色的网格数据：write_ply('cube.ply',face,vertex,color);
% 
% 该函数的作者是Meng Bin，版权归香港中文大学数学系计算几何组所有。
%% write ply 
% Write mesh data to ply format mesh file
%
%% Syntax
%   write_ply(filename,face,vertex)
%   write_ply(filename,face,vertex,color)
%
%% Description
%  filename: string, file to read.
%  face    : double array, nf x 3 array specifying the connectivity of the mesh.
%  vertex  : double array, nv x 3 array specifying the position of the vertices.
%  color   : double array, nv x 3 or nf x 3 array specifying the color of the vertices or faces.
%
%% Example
%   write_ply('cube.ply',face,vertex);
%   write_ply('cube.ply',face,vertex,color);
%
%% Contribution
%  Author : Meng Bin
%  Created: 2014/03/05
%  Revised: 2014/03/07 by Meng Bin, block write to enhance writing speed
%  Revised: 2014/03/17 by Meng Bin, modify doc format
% 
%  Copyright 2014 Computational Geometry Group
%  Department of Mathematics, CUHK
%  http://www.math.cuhk.edu.hk/~lmlui

function write_ply(filename,face,vertex,color)

fid = fopen(filename,'wt');
if( fid==-1 )
    error('Can''t open the file.');
end

nvert = size(vertex, 1);
nface = size(face, 1);
nvert_face = size(face, 2);

ncolor =0;
if nargin < 4
    color = [];
end
if ~isempty(color)
    ncolor = size(color, 1);
    if size(color, 2) < 3
        error('color matrix dimension must > 3');
    end
end

% write header
fprintf (fid, 'ply\n');
fprintf (fid, 'format ascii 1.0\n');
fprintf (fid, 'comment generated by geometric processing package\n');
fprintf (fid, 'element vertex %d\n',nvert);
fprintf (fid, 'property float x\n');
fprintf (fid, 'property float y\n');
fprintf (fid, 'property float z\n');
if ~isempty(color) && ncolor == nvert
    fprintf (fid, 'property red uchar\n');
    fprintf (fid, 'property green uchar\n');
    fprintf (fid, 'property blue uchar\n');
end
fprintf (fid, 'element face %d\n',nface);
fprintf (fid, 'property list uchar int vertex_indices\n');
if ~isempty(color) && ncolor == nface && ncolor ~= nvert
    fprintf (fid, 'property red uchar\n');
    fprintf (fid, 'property green uchar\n');
    fprintf (fid, 'property blue uchar\n');
end
fprintf (fid, 'end_header\n');

if nvert == ncolor 
    vertex = [vertex';color']';
end
if nface == ncolor && nvert ~= ncolor
    face =[zeros(1,nface)+nvert_face; face'-1;color']';
else
    face =[zeros(1,nface)+nvert_face;face'-1]';
end
% write vertex
dlmwrite(filename,vertex,'-append',...
         'delimiter',' ',...
         'precision', 6,...
         'newline','pc');
% write face
dlmwrite(filename,face,'-append',...
         'delimiter',' ',...
         'newline','pc');

fclose(fid);
